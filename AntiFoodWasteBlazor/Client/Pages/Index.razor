@using AntiFoodWasteBlazor.Client.Services
@using AntiFoodWasteBlazor.Shared.Models

@page "/"

<h1>Velkommen til Sallings AntiFoodWaste API platform.</h1>

<div>
	<label>Søg på postnummer:</label>
	<input @bind="_zipCode" placeholder="Postnummer" />
	<button class="btn btn-primary" @onclick="GetFoodWasteProducts">Søg</button>
</div>

<div>
    <label>Vælg butik</label>
    <InputSelect @bind-Value="_selectedStore" class="form-select" @onchange="OnStoreChanged">
        <option value="">Vælg butik</option>
        @foreach (var store in _uniqueStores)
        {
            <option value="@store">@store</option>
        }
    </InputSelect>
</div>

<p>Valgt butik: @_selectedStore</p>
@* <div>
    <label>Order by</label>
</div>

<div>
    <label>tilbuds udløb</label>
    <label> i dag: </label>
    <InputCheckbox></InputCheckbox>
    <label> i morgen: </label>
    <InputCheckbox></InputCheckbox>
</div>
 *@
@if (foodWasteProductList.Any())
{
    var filteredProducts = string.IsNullOrEmpty(_selectedStore)
       ? foodWasteProductList
       : foodWasteProductList.Where(p => p.store.Name == _selectedStore);


    <div class="product-grid">
        @foreach (var product in filteredProducts)
        {
            <div class="product-card">
                @if (!string.IsNullOrEmpty(product.ImageUrl))
                {
                    <img src="@product.ImageUrl" alt="@product.Description" />
                }
                else
                {
                    <div class="default-image">
                        <svg xmlns="http://www.w3.org/2000/svg" width="100" height="100" fill="gray" class="bi bi-image" viewBox="0 0 16 16">
                            <path d="M6.002 5.5a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0" />
                            <path d="M2.002 1a2 2 0 0 0-2 2v10a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V3a2 2 0 0 0-2-2zm12 1a1 1 0 0 1 1 1v6.5l-3.777-1.947a.5.5 0 0 0-.577.093l-3.71 3.71-2.66-1.772a.5.5 0 0 0-.63.062L1.002 12V3a1 1 0 0 1 1-1z" />
                        </svg>
                    </div>
                }

                <div class="product-title">@product.Description</div>
                <div>
                    <span class="product-price">@product.NewPrice kr.</span>
                    <span class="product-original-price">@product.OriginalPrice kr.</span>
                </div>
                <div class="product-stock">Lager: @product.StockCount @product.StockUnit</div>
                <div class="store-name">@product.store.Name</div>
            </div>
        }
    </div>
}
else
{
    <p>Indtast et postnummer og klik "Søg" for at hente varer.</p>
}

@code{
    [Inject]
    private SallingFoodWasteService SallingFoodWasteService { get; set; }

    private string _zipCode;

    private List<FoodWasteProduct> foodWasteProductList = new List<FoodWasteProduct>();
    private List<FoodWasteProduct> filteredProducts = new List<FoodWasteProduct>();

    private string _selectedStore = "";
    private List<string> _uniqueStores = new();

    private Store _store = new Store();


	private async Task GetFoodWasteProducts()   
	{
		foodWasteProductList = await SallingFoodWasteService.GetFoodWasteProductsAsync(_zipCode);

        _uniqueStores = foodWasteProductList
            .Select(p => p.store.Name)
            .Distinct()
            .OrderBy(name => name)
            .ToList();

        filteredProducts = new List<FoodWasteProduct>(foodWasteProductList);
	}

    private async Task OnStoreChanged(ChangeEventArgs e)
    {
        _selectedStore = e.Value?.ToString();

        if (string.IsNullOrEmpty(_selectedStore))
        {
            filteredProducts = new List<FoodWasteProduct>(foodWasteProductList);
        }
        else
        {
            filteredProducts = foodWasteProductList
                .Where(p => p.store.Name == _selectedStore)
                .ToList();
        }

        await Task.CompletedTask;
    }

}
